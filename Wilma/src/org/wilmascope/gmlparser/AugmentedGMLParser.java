/* Generated By:JavaCC: Do not edit this line. AugmentedGMLParser.java */
package org.wilmascope.gmlparser;
import java.io.*;
import java.util.Hashtable;
import java.util.Vector;

public class AugmentedGMLParser implements AugmentedGMLParserConstants {

// end lexical definitions, parser start
  final public void graph(AugmentedGraphClient g) throws ParseException {
    jj_consume_token(GRAPH);
    jj_consume_token(33);
    stmtList(g);
    jj_consume_token(34);
    jj_consume_token(0);
  }

  final public void stmtList(AugmentedGraphClient g) throws ParseException {
                                         String s;
    System.out.println("Parsing the GML graph...");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SERIES:
      jj_consume_token(SERIES);
      jj_consume_token(33);
      series(g);
      jj_consume_token(34);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case DIRECTED:
      case NODE:
      case EDGE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      stmt(g);
    }
  }

  final public void series(AugmentedGraphClient g) throws ParseException {
  Token t;
  Vector keys = new Vector();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CTLSTRING:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(CTLSTRING);
                    keys.add(t.image);
    }
    g.setSeriesKeys(keys);
  }

  final public void stmt(AugmentedGraphClient g) throws ParseException {
  NodeClient n;
  Token t1, t2, t3, t4;
  Hashtable series;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
      jj_consume_token(VERSION);
      jj_consume_token(NUM);
      break;
    case DIRECTED:
      jj_consume_token(DIRECTED);
      jj_consume_token(NUM);
      break;
    case NODE:
      jj_consume_token(NODE);
      jj_consume_token(33);
               t1=t2=t3=t4=null; series=null;
      jj_consume_token(ID);
      t1 = jj_consume_token(NUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        jj_consume_token(LABEL);
        t2 = jj_consume_token(CTLSTRING);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SERIES:
        jj_consume_token(SERIES);
        jj_consume_token(33);
                      series=new Hashtable();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ITEM:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          jj_consume_token(ITEM);
          t3 = jj_consume_token(CTLSTRING);
          jj_consume_token(VALUE);
          t4 = jj_consume_token(NUM);
                                                   series.put(t3.image,t4.image);
        }
        jj_consume_token(34);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
        String label=null;
        if(t2!=null) label=t2.image;
        if(series==null) {
          g.addNode(t1.image, label);
        } else {
          g.addNode(t1.image, label, series);
        }
      jj_consume_token(34);
      break;
    case EDGE:
      jj_consume_token(EDGE);
      jj_consume_token(33);
               t1=t2=t3=null;
      jj_consume_token(SOURCE);
      t1 = jj_consume_token(NUM);
      jj_consume_token(TARGET);
      t2 = jj_consume_token(NUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        jj_consume_token(LABEL);
        t3 = jj_consume_token(CTLSTRING);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      if(t3==null) {
        g.addEdge(t1.image, t2.image);
      } else {
        g.addEdge(t1.image,t2.image,t3.image);
      }
      jj_consume_token(34);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public AugmentedGMLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8000000,0x6c0000,0x0,0x1000000,0x10000000,0x8000000,0x1000000,0x6c0000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,};
   }

  public AugmentedGMLParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AugmentedGMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public AugmentedGMLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AugmentedGMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public AugmentedGMLParser(AugmentedGMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(AugmentedGMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[35];
    for (int i = 0; i < 35; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
