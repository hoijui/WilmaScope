/* Generated By:JavaCC: Do not edit this line. DotParser.java */
package org.wilmascope.dotparser;
import java.util.Vector;
import java.awt.Point;

public class DotParser implements DotParserConstants {

// end lexical definitions, parser start
  static final public void graph(GraphClient g) throws ParseException {
    jj_consume_token(DIGRAPH);
    jj_consume_token(ID);
    jj_consume_token(29);
    stmtList(g);
    jj_consume_token(30);
    jj_consume_token(0);
  }

  static final public void stmtList(GraphClient g) throws ParseException {
                                String s;
          System.out.println("Parsing the graph...");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case NODE:
      case ID:
      case NUM:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      stmt(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    }
  }

  static final public void stmt(GraphClient g) throws ParseException {
                             NodeClient n; EdgeClient e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
      jj_consume_token(GRAPH);
      graphAtts(g);
      break;
    case NODE:
      jj_consume_token(NODE);
      break;
    case ID:
    case NUM:
      n = node(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        e = edgeRHS(g,n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          edgeAtts(e);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          nodeAtts(n);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void graphAtts(GraphClient g) throws ParseException {
    jj_consume_token(32);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BB:
      case CONCENTRATE:
      case LAYERS:
      case 37:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCENTRATE:
        jj_consume_token(CONCENTRATE);
        jj_consume_token(33);
        break;
      case LAYERS:
        jj_consume_token(LAYERS);
        jj_consume_token(34);
        jj_consume_token(35);
        jj_consume_token(ID);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_3;
          }
          jj_consume_token(36);
          jj_consume_token(ID);
        }
        jj_consume_token(35);
        break;
      case BB:
        jj_consume_token(BB);
        jj_consume_token(34);
        jj_consume_token(35);
        bounds(g);
        jj_consume_token(35);
        break;
      case 37:
        jj_consume_token(37);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(38);
  }

  static final public void bounds(GraphClient g) throws ParseException {
                              Token t1,t2,t3,t4;
    t1 = jj_consume_token(NUM);
    jj_consume_token(37);
    t2 = jj_consume_token(NUM);
    jj_consume_token(37);
    t3 = jj_consume_token(NUM);
    jj_consume_token(37);
    t4 = jj_consume_token(NUM);
    g.setBoundingBox(
      Integer.parseInt(t1.image),
      Integer.parseInt(t2.image),
      Integer.parseInt(t3.image),
      Integer.parseInt(t4.image)
    );
  }

  static final public void nodeAtts(NodeClient n) throws ParseException {
                               Token t1,t2;
    jj_consume_token(32);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
      case POS:
      case SHAPE:
      case WIDTH:
      case HEIGHT:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        jj_consume_token(LABEL);
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          jj_consume_token(39);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      case SHAPE:
        jj_consume_token(SHAPE);
        jj_consume_token(34);
        jj_consume_token(ID);
        break;
      case POS:
        jj_consume_token(POS);
        jj_consume_token(34);
        jj_consume_token(35);
        t1 = jj_consume_token(NUM);
        jj_consume_token(37);
        t2 = jj_consume_token(NUM);
        jj_consume_token(35);
      n.setPosition(Integer.parseInt(t1.image),Integer.parseInt(t2.image));
        break;
      case WIDTH:
        jj_consume_token(WIDTH);
        jj_consume_token(34);
        jj_consume_token(35);
        jj_consume_token(DEC);
        jj_consume_token(35);
        break;
      case HEIGHT:
        jj_consume_token(HEIGHT);
        jj_consume_token(34);
        jj_consume_token(35);
        jj_consume_token(DEC);
        jj_consume_token(35);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    }
    jj_consume_token(38);
  }

  static final public EdgeClient edgeRHS(GraphClient g, NodeClient start) throws ParseException {
  NodeClient end;
  EdgeClient e;
    jj_consume_token(40);
    end = node(g);
                        e = g.addEdge(start,end);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      e = edgeRHS(g,end);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public void edgeAtts(EdgeClient e) throws ParseException {
  Vector curves = new Vector();
  Token t;
    jj_consume_token(32);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POS:
      case WEIGHT:
      case LAYER:
      case MINLEN:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINLEN:
        jj_consume_token(MINLEN);
        jj_consume_token(34);
        jj_consume_token(NUM);
        break;
      case LAYER:
        jj_consume_token(LAYER);
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        t = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
                                             e.setLayer(t.image); System.out.println("EdgeLayer="+t.image);
        break;
      case WEIGHT:
        jj_consume_token(WEIGHT);
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        jj_consume_token(NUM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        break;
      case POS:
        jj_consume_token(POS);
        jj_consume_token(34);
        jj_consume_token(35);
        curve(e,curves);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_6;
          }
          jj_consume_token(31);
          curve(e,curves);
        }
        jj_consume_token(35);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    }
    jj_consume_token(38);
    e.setCurves(curves);
  }

  static final public void curve(EdgeClient e, Vector curves) throws ParseException {
  Vector pnts = new Vector();
  Token t1, t2;
  boolean arrowAtStart = false;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
      case 42:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
           arrowAtStart = false;
        break;
      case 42:
        jj_consume_token(42);
                                           arrowAtStart = true;
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t1 = jj_consume_token(NUM);
      jj_consume_token(37);
      t2 = jj_consume_token(NUM);
      e.addArrow(curves.size(),arrowAtStart,new Point(
        Integer.parseInt(t1.image), Integer.parseInt(t2.image)));
    }
    label_8:
    while (true) {
      bezierPnt(pnts);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
    }
    curves.add(pnts);
  }

  static final public void bezierPnt(Vector pnts) throws ParseException {
  Token t;
  int a,b;
    t = jj_consume_token(NUM);
    a = Integer.parseInt(t.image);
    jj_consume_token(37);
    t = jj_consume_token(NUM);
    b = Integer.parseInt(t.image);
    pnts.add(new Point(a,b));
  }

  static final public NodeClient node(GraphClient g) throws ParseException {
  Token t;
  String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t = jj_consume_token(NUM);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return g.addNode(t.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public DotParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static final private int[] jj_la1_0 = {0x1800a00,0x80000000,0x0,0x0,0x0,0x1800a00,0x288000,0x0,0x288000,0x57000,0x0,0x0,0x0,0x57000,0x0,0x0,0x522000,0x0,0x0,0x0,0x0,0x80000000,0x522000,0x0,0x0,0x0,0x1000000,0x1800000,};
  static final private int[] jj_la1_1 = {0x0,0x0,0x1,0x1,0x100,0x0,0x20,0x10,0x20,0x0,0x8,0x80,0x8,0x0,0x20,0x100,0x0,0x8,0x8,0x8,0x8,0x0,0x0,0x20,0x600,0x600,0x0,0x0,};

  public DotParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public DotParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public DotParser(DotParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(DotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[43];
    for (int i = 0; i < 43; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
