/* Generated By:JavaCC: Do not edit this line. DotParser.java */
package org.wilmascope.dotparser;
import java.util.Vector;
import java.io.*;
import java.awt.Point;

public class DotParser implements DotParserConstants {

// end lexical definitions, parser start
  static final public void graph(GraphClient g) throws ParseException {
    jj_consume_token(DIGRAPH);
    jj_consume_token(ID);
    jj_consume_token(31);
    stmtList(g);
    jj_consume_token(32);
    jj_consume_token(0);
  }

  static final public void stmtList(GraphClient g) throws ParseException {
                                String s;
          System.out.println("Parsing the graph...");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case NODE:
      case ID:
      case NUM:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      stmt(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    }
  }

  static final public void stmt(GraphClient g) throws ParseException {
                             NodeClient n; EdgeClient e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
      jj_consume_token(GRAPH);
      graphAtts(g);
      break;
    case NODE:
      jj_consume_token(NODE);
      break;
    case ID:
    case NUM:
      n = node(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        e = edgeRHS(g,n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          edgeAtts(e);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          nodeAtts(n);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void graphAtts(GraphClient g) throws ParseException {
                                 Token t1;
    jj_consume_token(34);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RATIO:
      case BB:
      case CONCENTRATE:
      case LAYERS:
      case 36:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCENTRATE:
        jj_consume_token(CONCENTRATE);
        jj_consume_token(35);
        jj_consume_token(ID);
        break;
      case LAYERS:
        jj_consume_token(LAYERS);
        jj_consume_token(35);
        jj_consume_token(CTLSTRING);
        break;
      case RATIO:
        jj_consume_token(RATIO);
        jj_consume_token(35);
        jj_consume_token(NUM);
        break;
      case BB:
        jj_consume_token(BB);
        jj_consume_token(35);
        t1 = jj_consume_token(CTLSTRING);
                                g.setBoundingBox(t1.image);
        break;
      case 36:
        jj_consume_token(36);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(37);
  }

  static final public void nodeAtts(NodeClient n) throws ParseException {
                               Token t1,t2;
    jj_consume_token(34);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
      case POS:
      case SHAPE:
      case WIDTH:
      case HEIGHT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        jj_consume_token(LABEL);
        jj_consume_token(35);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CTLSTRING:
          jj_consume_token(CTLSTRING);
          break;
        case ID:
          jj_consume_token(ID);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case SHAPE:
        jj_consume_token(SHAPE);
        jj_consume_token(35);
        jj_consume_token(ID);
        break;
      case POS:
        jj_consume_token(POS);
        jj_consume_token(35);
        t1 = jj_consume_token(CTLSTRING);
      n.setPosition(t1.image);
        break;
      case WIDTH:
        jj_consume_token(WIDTH);
        jj_consume_token(35);
        jj_consume_token(CTLSTRING);
        break;
      case HEIGHT:
        jj_consume_token(HEIGHT);
        jj_consume_token(35);
        jj_consume_token(CTLSTRING);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    }
    jj_consume_token(37);
  }

  static final public EdgeClient edgeRHS(GraphClient g, NodeClient start) throws ParseException {
  NodeClient end;
  EdgeClient e;
    jj_consume_token(38);
    end = node(g);
                        e = g.addEdge(start,end);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      e = edgeRHS(g,end);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public void edgeAtts(EdgeClient e) throws ParseException {
  Vector curves = new Vector();
  Token t;
    jj_consume_token(34);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POS:
      case WEIGHT:
      case LAYER:
      case MINLEN:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINLEN:
        jj_consume_token(MINLEN);
        jj_consume_token(35);
        jj_consume_token(NUM);
        break;
      case LAYER:
        jj_consume_token(LAYER);
        jj_consume_token(35);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case CTLSTRING:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            jj_consume_token(ID);
            break;
          case CTLSTRING:
            jj_consume_token(CTLSTRING);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case WEIGHT:
        jj_consume_token(WEIGHT);
        jj_consume_token(35);
        jj_consume_token(NUM);
        break;
      case POS:
        jj_consume_token(POS);
        jj_consume_token(35);
        t = jj_consume_token(CTLSTRING);
                                  e.setCurves(t.image);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    }
    jj_consume_token(37);
  }

  static final public NodeClient node(GraphClient g) throws ParseException {
  Token t;
  String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t = jj_consume_token(NUM);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return g.addNode(t.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public DotParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x5000a00,0x0,0x0,0x0,0x0,0x5000a00,0x514000,0x514000,0xab000,0x3000000,0xab000,0x0,0x0,0xa42000,0x3000000,0x3000000,0xa42000,0x0,0x5000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x2,0x4,0x4,0x40,0x0,0x10,0x10,0x0,0x0,0x0,0x10,0x40,0x0,0x0,0x0,0x0,0x10,0x0,};
   }

  public DotParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public DotParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public DotParser(DotParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(DotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[39];
    for (int i = 0; i < 39; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
